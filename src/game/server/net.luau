--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.0 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Promise = require(ReplicatedStorage.WTHShared.include.Promise)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Events.Reliable[0] = {}
Queue.Reliable[0] = table.create(256)
Events.Reliable[1] = {}
Queue.Reliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
Events.Reliable[3] = {}
Queue.Reliable[3] = table.create(256)
Queue.Reliable[4] = table.create(256)
Queue.Reliable[5] = table.create(256)
export type kit_DamageKind = ("Normal" | "Heavy" | "Super" | "Lethal")
export type towers_TowerRunType = ("Standard" | "Practice")
export type towers_StartTowerRun = { towerType: ("Standard" | "Practice"), towerName: string }
export type towers_StartTowerRunResult = { instance: Instance, mechanics: Instance }
local function kit_ReadEVENT_damageSelfVariable(): (number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function kit_ReadEVENT_damageSelf(): (("Normal" | "Heavy" | "Super" | "Lethal"))
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Value = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Index == 0 then
		Value = "Normal"
	elseif Index == 1 then
		Value = "Heavy"
	elseif Index == 2 then
		Value = "Super"
	elseif Index == 3 then
		Value = "Lethal"
	else
		error(`Unexpected enum: {Index}`)
	end
	return Value
end

local function areas_ReadFUNCTION_DATA_loadArea(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function areas_WriteFUNCTION_RETURN_loadArea(Value: Instance, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	table.insert(SendInstances, Value or Null)
end

local function areas_ReadEVENT_confirmAreaLoaded(): (nil)
	return nil
end

local function towers_ReadFUNCTION_DATA_startTowerRun(): ({ towerType: ("Standard" | "Practice"), towerName: string })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value = {} :: any
	Value.towerType = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Index == 0 then
		Value.towerType = "Standard"
	elseif Index == 1 then
		Value.towerType = "Practice"
	else
		error(`Unexpected enum: {Index}`)
	end
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 1)
	Value.towerName = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function towers_WriteFUNCTION_RETURN_startTowerRun(Value: { instance: Instance, mechanics: Instance }?, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value ~= nil and 1 or 0)
	if Value ~= nil then
		table.insert(SendInstances, Value.instance or Null)
		table.insert(SendInstances, Value.mechanics or Null)
	end
end

local function towers_ReadFUNCTION_DATA_requestDetailsInTower(): (nil)
	return nil
end

local function towers_WriteFUNCTION_RETURN_requestDetailsInTower(Value: Instance, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	table.insert(SendInstances, Value or Null)
end

local function towers_WriteEVENT_syncElapsedTime(Value: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writef32(SendBuffer, BLOCK_START + 1, Value)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	kit = {
		damageSelfVariable = {
			on = NOOP
		},
		damageSelf = {
			on = NOOP
		},
	},
	areas = {
		loadArea = {
			on = NOOP
		},
		confirmAreaLoaded = {
			on = NOOP
		},
	},
	towers = {
		startTowerRun = {
			on = NOOP
		},
		requestDetailsInTower = {
			on = NOOP
		},
		syncElapsedTime = {
			fire = NOOP,
			fireAll = NOOP,
			fireList = NOOP,
			fireExcept = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: number = kit_ReadEVENT_damageSelfVariable()
			if #Events.Reliable[0] > 0 then
				for _, Listener in Events.Reliable[0] do
					task.spawn(Listener, Player, Value)
				end
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"damageSelfVariable\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Player, Value} :: {any})
			end
		elseif Index == 1 then
			local Value: ("Normal" | "Heavy" | "Super" | "Lethal") = kit_ReadEVENT_damageSelf()
			if #Events.Reliable[1] > 0 then
				for _, Listener in Events.Reliable[1] do
					task.spawn(Listener, Player, Value)
				end
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"damageSelf\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value} :: {any})
			end
		elseif Index == 2 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: string = areas_ReadFUNCTION_DATA_loadArea()
			if Events.Reliable[2] ~= nil then
				task.spawn(Events.Reliable[2], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"loadArea\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 3 then
			local Value: nil = areas_ReadEVENT_confirmAreaLoaded()
			if #Events.Reliable[3] > 0 then
				for _, Listener in Events.Reliable[3] do
					task.spawn(Listener, Player, Value)
				end
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"confirmAreaLoaded\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Player, Value} :: {any})
			end
		elseif Index == 4 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: { towerType: ("Standard" | "Practice"), towerName: string } = towers_ReadFUNCTION_DATA_startTowerRun()
			if Events.Reliable[4] ~= nil then
				task.spawn(Events.Reliable[4], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"startTowerRun\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 5 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: nil = towers_ReadFUNCTION_DATA_requestDetailsInTower()
			if Events.Reliable[5] ~= nil then
				task.spawn(Events.Reliable[5], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[5] > 256 then
					warn("[Blink]: Event queue of \"requestDetailsInTower\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[5], {Player, Value, InvocationIdentifier} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	kit = {
		damageSelfVariable = {
			on = function(Listener: (Player: Player, Value: number) -> ()): () -> ()
				table.insert(Events.Reliable[0], Listener)
				for Index, Arguments in Queue.Reliable[0] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[0] = {}
				return function (): ()
					table.remove(Events.Reliable[0], table.find(Events.Reliable[0], Listener))
				end
			end
		},
		damageSelf = {
			on = function(Listener: (Player: Player, Value: ("Normal" | "Heavy" | "Super" | "Lethal")) -> ()): () -> ()
				table.insert(Events.Reliable[1], Listener)
				for Index, Arguments in Queue.Reliable[1] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[1] = {}
				return function (): ()
					table.remove(Events.Reliable[1], table.find(Events.Reliable[1], Listener))
				end
			end
		},
	},
	areas = {
		loadArea = {
		on = function(Listener: (Player, string) -> (Instance)): ()
			Events.Reliable[2] = function(Player: Player, Value: string, InvocationIdentifier: number): ()
				local ReturnValue: Instance;
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 2)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"loadArea" encountered an error, {Error}`)
				else
					areas_WriteFUNCTION_RETURN_loadArea(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[2] or {}
				Queue.Reliable[2] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[2](table.unpack(Arguments))
				end
			end)
		end
		},
		confirmAreaLoaded = {
			on = function(Listener: (Player: Player, Value: nil) -> ()): () -> ()
				table.insert(Events.Reliable[3], Listener)
				for Index, Arguments in Queue.Reliable[3] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[3] = {}
				return function (): ()
					table.remove(Events.Reliable[3], table.find(Events.Reliable[3], Listener))
				end
			end
		},
	},
	towers = {
		startTowerRun = {
		on = function(Listener: (Player, { towerType: ("Standard" | "Practice"), towerName: string }) -> ({ instance: Instance, mechanics: Instance }?)): ()
			Events.Reliable[4] = function(Player: Player, Value: { towerType: ("Standard" | "Practice"), towerName: string }, InvocationIdentifier: number): ()
				local ReturnValue: { instance: Instance, mechanics: Instance }?;
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 4)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"startTowerRun" encountered an error, {Error}`)
				else
					towers_WriteFUNCTION_RETURN_startTowerRun(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[4] or {}
				Queue.Reliable[4] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[4](table.unpack(Arguments))
				end
			end)
		end
		},
		requestDetailsInTower = {
		on = function(Listener: (Player, nil) -> (Instance)): ()
			Events.Reliable[5] = function(Player: Player, Value: nil, InvocationIdentifier: number): ()
				local ReturnValue: Instance;
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 5)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"requestDetailsInTower" encountered an error, {Error}`)
				else
					towers_WriteFUNCTION_RETURN_requestDetailsInTower(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[5] or {}
				Queue.Reliable[5] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[5](table.unpack(Arguments))
				end
			end)
		end
		},
		syncElapsedTime = {
			fire = function(Player: Player, Value: number): ()
				Load()
				towers_WriteEVENT_syncElapsedTime(Value)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end,
			fireAll = function(Value: number): ()
				Load()
				towers_WriteEVENT_syncElapsedTime(Value)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				Unreliable:FireAllClients(Buffer, SendInstances)
			end,
			fireList = function(List: {Player}, Value: number): ()
				Load()
				towers_WriteEVENT_syncElapsedTime(Value)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				for _, Player in List do
					Unreliable:FireClient(Player, Buffer, SendInstances)
				end
			end,
			fireExcept = function(Except: Player, Value: number): ()
				Load()
				towers_WriteEVENT_syncElapsedTime(Value)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Unreliable:FireClient(Player, Buffer, SendInstances)
				end
			end,
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL