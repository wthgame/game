--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.0 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Promise = require(ReplicatedStorage.include.Promise)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[2] = table.create(256)
Queue.Reliable[4] = table.create(256)
Queue.Reliable[5] = table.create(256)
Events.Unreliable[0] = {}
Queue.Unreliable[0] = table.create(256)
export type kit_DamageKind = ("Normal" | "Heavy" | "Lethal")
export type towers_TowerRunType = ("Standard" | "Practice")
export type towers_StartTowerRun = { towerType: ("Standard" | "Practice"), towerName: string }
export type towers_StartTowerRunResult = { instance: Instance, mechanics: Instance }
local function kit_WriteEVENT_damageSelfVariable(Value: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu32(SendBuffer, BLOCK_START + 1, Value)
end

local function kit_WriteEVENT_damageSelf(Value: ("Normal" | "Heavy" | "Lethal")): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	if Value == "Normal" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
	elseif Value == "Heavy" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	elseif Value == "Lethal" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 2)
	else
		error(`Unexpected enum: {Value}, expected one of "Normal" or "Heavy" or "Lethal".`)
	end
end

local function areas_WriteFUNCTION_DATA_loadArea(Value: string, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 2, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function areas_ReadFUNCTION_RETURN_loadArea(): (Instance)
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	RecieveInstanceCursor += 1
	local Value = RecieveInstances[RecieveInstanceCursor]
	if typeof(Value) ~= "Instance" then error(`Expected an Instance, got {typeof(Value)} instead.`) end
	if not Value:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.ClassName}" instead.`) end
	return Value
end

local function areas_WriteEVENT_confirmAreaLoaded(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
end

local function towers_WriteFUNCTION_DATA_startTowerRun(Value: { towerType: ("Standard" | "Practice"), towerName: string }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	if Value.towerType == "Standard" then
		buffer.writeu8(SendBuffer, BLOCK_START + 2, 0)
	elseif Value.towerType == "Practice" then
		buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	else
		error(`Unexpected enum: {Value.towerType}, expected one of "Standard" or "Practice".`)
	end
	local Length = #Value.towerName
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.towerName, Length)
end

local function towers_ReadFUNCTION_RETURN_startTowerRun(): ({ instance: Instance, mechanics: Instance }?)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Value
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		Value = {} :: any
		RecieveInstanceCursor += 1
		Value.instance = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value.instance) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.instance)} instead.`) end
		if not Value.instance:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.instance.ClassName}" instead.`) end
		RecieveInstanceCursor += 1
		Value.mechanics = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value.mechanics) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.mechanics)} instead.`) end
		if not Value.mechanics:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.mechanics.ClassName}" instead.`) end
	end
	return Value
end

local function towers_WriteFUNCTION_DATA_requestDetailsInTower(Value: nil, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
end

local function towers_ReadFUNCTION_RETURN_requestDetailsInTower(): (Instance)
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	RecieveInstanceCursor += 1
	local Value = RecieveInstances[RecieveInstanceCursor]
	if typeof(Value) ~= "Instance" then error(`Expected an Instance, got {typeof(Value)} instead.`) end
	if not Value:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.ClassName}" instead.`) end
	return Value
end

local function towers_ReadEVENT_syncElapsedTime(): (number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	kit = {
		damageSelfVariable = {
			fire = NOOP
		},
		damageSelf = {
			fire = NOOP
		},
	},
	areas = {
		loadArea = {
			invoke = NOOP
		},
		confirmAreaLoaded = {
			fire = NOOP
		},
	},
	towers = {
		startTowerRun = {
			invoke = NOOP
		},
		requestDetailsInTower = {
			invoke = NOOP
		},
		syncElapsedTime = {
			on = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 2 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return areas_ReadFUNCTION_RETURN_loadArea()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		elseif Index == 4 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return towers_ReadFUNCTION_RETURN_startTowerRun()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		elseif Index == 5 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return towers_ReadFUNCTION_RETURN_requestDetailsInTower()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: number = towers_ReadEVENT_syncElapsedTime()
			for _, Listener in Events.Unreliable[0] do
				task.spawn(Listener, Value)
			end
		end
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	kit = {
		damageSelfVariable = {
			fire = function(Value: number): ()
				kit_WriteEVENT_damageSelfVariable(Value)
			end
		},
		damageSelf = {
			fire = function(Value: ("Normal" | "Heavy" | "Lethal")): ()
				kit_WriteEVENT_damageSelf(Value)
			end
		},
	},
	areas = {
		loadArea = {
			invoke = function(Value: string): any
				return Promise.new(function (Resolve, Reject, OnCancel)
					local InvocationIdentifier = Invoke()
					if Calls[InvocationIdentifier] ~= nil then
						Invocations -= 1
						error("More than 256 calls are awaiting a response, this packet has been dropped.")
					end
					areas_WriteFUNCTION_DATA_loadArea(Value, InvocationIdentifier)
					Calls[InvocationIdentifier] = coroutine.running()
					OnCancel(function ()
						Calls[InvocationIdentifier] = nil
					end)
					local Success, ReturnValue: Instance = coroutine.yield()
					if Success ~= true then
						Reject("There was an exception while processing \"loadArea\".")
						return 
					end
					Resolve(ReturnValue)
				end)
			end
		},
		confirmAreaLoaded = {
			fire = function(Value: nil): ()
				areas_WriteEVENT_confirmAreaLoaded(Value)
			end
		},
	},
	towers = {
		startTowerRun = {
			invoke = function(Value: { towerType: ("Standard" | "Practice"), towerName: string }): any
				return Promise.new(function (Resolve, Reject, OnCancel)
					local InvocationIdentifier = Invoke()
					if Calls[InvocationIdentifier] ~= nil then
						Invocations -= 1
						error("More than 256 calls are awaiting a response, this packet has been dropped.")
					end
					towers_WriteFUNCTION_DATA_startTowerRun(Value, InvocationIdentifier)
					Calls[InvocationIdentifier] = coroutine.running()
					OnCancel(function ()
						Calls[InvocationIdentifier] = nil
					end)
					local Success, ReturnValue: { instance: Instance, mechanics: Instance }? = coroutine.yield()
					if Success ~= true then
						Reject("There was an exception while processing \"startTowerRun\".")
						return 
					end
					Resolve(ReturnValue)
				end)
			end
		},
		requestDetailsInTower = {
			invoke = function(Value: nil): any
				return Promise.new(function (Resolve, Reject, OnCancel)
					local InvocationIdentifier = Invoke()
					if Calls[InvocationIdentifier] ~= nil then
						Invocations -= 1
						error("More than 256 calls are awaiting a response, this packet has been dropped.")
					end
					towers_WriteFUNCTION_DATA_requestDetailsInTower(Value, InvocationIdentifier)
					Calls[InvocationIdentifier] = coroutine.running()
					OnCancel(function ()
						Calls[InvocationIdentifier] = nil
					end)
					local Success, ReturnValue: Instance = coroutine.yield()
					if Success ~= true then
						Reject("There was an exception while processing \"requestDetailsInTower\".")
						return 
					end
					Resolve(ReturnValue)
				end)
			end
		},
		syncElapsedTime = {
			on = function(Listener: (Value: number) -> ()): () -> ()
				table.insert(Events.Unreliable[0], Listener)
				return function (): ()
					table.remove(Events.Unreliable[0], table.find(Events.Unreliable[0], Listener))
				end
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL